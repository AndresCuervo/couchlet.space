<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>᠅</title>
    <link>https://andrescuervo.github.io/twentyfourseven/</link>
    <description>Recent content on ᠅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://andrescuervo.github.io/twentyfourseven/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>05.10.2017</title>
      <link>https://andrescuervo.github.io/twentyfourseven/day1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andrescuervo.github.io/twentyfourseven/day1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>05.11.2017</title>
      <link>https://andrescuervo.github.io/twentyfourseven/day2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andrescuervo.github.io/twentyfourseven/day2/</guid>
      <description>   attribute float size; attribute vec3 customColor; varying vec3 vColor; void main() { vColor = customColor; vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 ); gl_PointSize = size * ( 300.0 / -mvPosition.z ); gl_Position = projectionMatrix * mvPosition; }  uniform vec3 color; uniform sampler2D texture; varying vec3 vColor; void main() { gl_FragColor = vec4( color * vColor, 1.0 ); gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord ); }   </description>
    </item>
    
    <item>
      <title>05.12.2017</title>
      <link>https://andrescuervo.github.io/twentyfourseven/day3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andrescuervo.github.io/twentyfourseven/day3/</guid>
      <description>    
   attribute float size; attribute vec3 customColor; varying vec3 vColor; void main() { vColor = customColor; vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 ); gl_PointSize = size * ( 300.0 / -mvPosition.z ); gl_Position = projectionMatrix * mvPosition; }  uniform vec3 color; uniform sampler2D texture; varying vec3 vColor; void main() { gl_FragColor = vec4( color * vColor, 1.0 ); gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord ); }   </description>
    </item>
    
    <item>
      <title>05.13.2017</title>
      <link>https://andrescuervo.github.io/twentyfourseven/day4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andrescuervo.github.io/twentyfourseven/day4/</guid>
      <description>Sorry your graphics card + browser does not support hardware instancing        precision highp float; uniform float sineTime; uniform float range; uniform mat4 modelViewMatrix; uniform mat4 projectionMatrix; attribute vec3 position; attribute vec3 offset; attribute vec4 color; attribute vec4 orientationStart; attribute vec4 orientationEnd; varying vec3 vPosition; varying vec4 vColor; void main(){ vPosition = offset + range * position; vec4 orientation = mix(vec4(offset,1), normalize(orientationStart),range); vec3 vcV = cross(orientation.</description>
    </item>
    
    <item>
      <title>05.14.2017</title>
      <link>https://andrescuervo.github.io/twentyfourseven/day5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andrescuervo.github.io/twentyfourseven/day5/</guid>
      <description>precision highp float; uniform float sineTime; uniform float range; uniform mat4 modelViewMatrix; uniform mat4 projectionMatrix; attribute vec3 position; attribute vec3 offset; attribute vec4 color; attribute vec4 orientationStart; attribute vec4 orientationEnd; varying vec3 vPosition; varying vec4 vColor; varying float distFromCenter; void main(){ vPosition = 10.0*offset + position; vec4 orientation = vec4(offset,1); vec3 vcV = cross(orientation.xyz, vPosition); vPosition = vcV * (2.0 * orientation.w) + (cross(orientation.</description>
    </item>
    
    <item>
      <title>05.16.2017</title>
      <link>https://andrescuervo.github.io/twentyfourseven/day6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andrescuervo.github.io/twentyfourseven/day6/</guid>
      <description>varying float depth; varying vec3 v_pos; uniform float center_x; uniform float center_y; uniform float time; void main() { float scale = (sin(time*0.2)+1.0)*.01 + .004; float height = 200.0; vec3 vertex = position; vertex.z += exp(-(pow((vertex.x-center_x)*scale, 2.0) + pow((vertex.y-center_y)*scale, 2.0))) * height; vec4 cs_pos = projectionMatrix * modelViewMatrix * vec4( vertex, 1.0 ); depth = cs_pos.z * .001; v_pos = vertex; gl_Position = cs_pos; }  varying float depth; varying vec3 v_pos; uniform float time; void main() { float proportion = (sin(time*.</description>
    </item>
    
    <item>
      <title>05.17.2017</title>
      <link>https://andrescuervo.github.io/twentyfourseven/day7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andrescuervo.github.io/twentyfourseven/day7/</guid>
      <description>varying float depth; varying vec3 v_pos; uniform float center_x; uniform float center_y; uniform float time; void main() { float scale = (sin(time*0.2)+1.0)*.01 + .004; float height = 200.0; vec3 vertex = position; vertex.z += exp(-(pow((vertex.x-center_x)*scale, 2.0) + pow((vertex.y-center_y)*scale, 2.0))) * height; vec4 cs_pos = projectionMatrix * modelViewMatrix * vec4( vertex, 1.0 ); depth = cs_pos.z * .001; v_pos = vertex; gl_Position = cs_pos; }  varying float depth; varying vec3 v_pos; uniform float time; void main() { float proportion = (sin(time*.</description>
    </item>
    
    <item>
      <title>05.18.2017</title>
      <link>https://andrescuervo.github.io/twentyfourseven/day8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andrescuervo.github.io/twentyfourseven/day8/</guid>
      <description>precision highp float; uniform mat4 modelViewMatrix; uniform mat4 projectionMatrix; uniform float time; attribute vec3 position; attribute vec2 uv; attribute vec3 translate; varying vec2 vUv; varying float vScale; float rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); } void main() { vec4 mvPosition = modelViewMatrix * vec4( translate, 1.0 ); vec3 trTime = vec3(translate.</description>
    </item>
    
    <item>
      <title>05.19.2017</title>
      <link>https://andrescuervo.github.io/twentyfourseven/day9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andrescuervo.github.io/twentyfourseven/day9/</guid>
      <description>precision highp float; uniform mat4 modelViewMatrix; uniform mat4 projectionMatrix; uniform float time; attribute vec3 position; attribute vec2 uv; attribute vec3 translate; varying vec2 vUv; varying float vScale; float rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); } void main() { vec4 mvPosition = modelViewMatrix * vec4( translate, 1.0 ); vec3 trTime = vec3(translate.</description>
    </item>
    
    <item>
      <title>05.20.2017</title>
      <link>https://andrescuervo.github.io/twentyfourseven/day10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andrescuervo.github.io/twentyfourseven/day10/</guid>
      <description>precision highp float; uniform mat4 modelViewMatrix; uniform mat4 projectionMatrix; uniform float time; attribute vec3 position; attribute vec2 uv; attribute vec3 translate; varying vec2 vUv; varying float vScale; float rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); } void main() { vec4 mvPosition = modelViewMatrix * vec4( translate, 1.0 ); vec3 trTime = vec3(translate.</description>
    </item>
    
  </channel>
</rss>